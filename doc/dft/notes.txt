to launch slides in this dir use `npx slidev`



// Title

How `TypeVarTuple` Enables Complete and Expressive DataFrame Type Hinting

Type Hinting DataFrames with `TypeVarTuple`

Python 3.11's `TypeVarTuple`: The Missing Piece for DataFrame Type Hinting

Type-Hinting Generic Arrays and Generic Variadic DataFrames


// Description: 300 words

Python type hints have made Python code more maintainable and statically verifiable. With support for generically typed containers (i.e, defining a `list` of `str` as `list[str]`), Python developers further benefit from type hints that completely specify complex, nested data structures. DataFrames are also a complex, nested data structure: index labels, column labels, and columnar values all have distinct types. And yet, at least with Pandas, generic DataFrame specification is not supported.

Taking advantage of the new `TypeVarTuple` (introduced in Python 3.11), StaticFrame has implemented support for complete generic specification of DataFrames. A DataFrame with date-index labels, string-column labels, and columnar types of integers and Booleans can now be specified as `sf.Frame[sf.IndexDate, sf.Index[np.str_], np.int64, np.bool_]`. As `TypeVarTuple` defines variadic generators, more columnar types can be added as needed.

Rather than defining each columnar type, `TypeVarTuple` also permits defining a region of zero or more uniform types with star-expanded tuple generics (or `Unpack`-wrapped tuple generics). For example, a DataFrame with integer-index labels, string-column labels, and columnar types of one leading string column followed by zero or more float columns can be specified as `sf.Frame[sf.Index[np.int64], sf.Index[np.str_], np.str_, *tuple[np.float64, ...]]`. A DataFrame with no assumptions of index labels, column labels, or zero or more columnar types can be specified as `sf.Frame[Any, Any, *tuple[Any, ...]]`.

This presentation will demonstrate a comprehensive approach to type-hinting DataFrames. The benefits of using `TypeVarTuple` for type-hinting columnar types as well as variable-depth hierarchical indices will be shown. Using the same type hints for run-time validation with the `CallGuard.check` decorator, as well as automatically deriving and testing type hints at run-time `TypeClinic`, will also be demonstrated.





// Provide an outline that lists the topics and activities you will use to guide the presentation. Please estimate what portion of your presentation youâ€™ll devote to each major topic. We just want to see where the focus will be.


The Problem of Typing DataFrames
`TypeVarTuple`
Using `TypeVarTuple` for columnar types
Using `TypeVarTuple` for hierarchical indices
Using Pyright and Mypy for static analysis
Using `CallGuard.check` for run-time validation
Using `TypeClinic` for type discovery and run-time type checking






`TypeVarTuple` thus permits defining explicit columnar types of fixed or variable size.