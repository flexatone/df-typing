to launch slides in this dir use `npx slidev`



// Title

How `TypeVarTuple` Enables Complete DataFrame Type Hinting

How `TypeVarTuple` Enables Complete and Expressive DataFrame Type Hinting

Type Hinting DataFrames with `TypeVarTuple`

Python 3.11's `TypeVarTuple`: The Missing Piece for DataFrame Type Hinting

Type-Hinting Generic Arrays and Generic Variadic DataFrames


// Description: 300 words

Python type hints have made Python code more maintainable and statically verifiable. With support for generically typed containers (i.e, defining a `list` of `str` as `list[str]`), Python developers further benefit from type hints that completely specify complex, nested data structures. DataFrames are also a complex, nested data structure: index labels, column labels, and columnar values all have distinct types. And yet, at least with Pandas, generic DataFrame specification is not supported.

Taking advantage of the new `TypeVarTuple` (introduced in Python 3.11), StaticFrame has implemented support for complete generic specification of DataFrames. A DataFrame with date-index labels, string-column labels, and columnar types of integers and Booleans can now be specified as `sf.Frame[sf.IndexDate, sf.Index[np.str_], np.int64, np.bool_]`. As `TypeVarTuple` defines variadic generators, the number of columnar types is variable.

Rather than defining a type per column, `TypeVarTuple` also permits defining a type for a region of zero or more columns using star-expanded tuple generics. For example, a DataFrame with integer-index labels, string-column labels, and columnar types of one leading string column followed by zero or more float columns can be specified as `sf.Frame[sf.Index[np.int64], sf.Index[np.str_], np.str_, *tuple[np.float64, ...]]`. This facility permits flexible, expressive type hints.

This presentation introduces a comprehensive approach to type-hinting DataFrames and associated containers. The benefits of using `TypeVarTuple` for type-hinting columnar types as well as variable-depth hierarchical indices will be shown. StaticFrame goes further to implement run-time validation with the `CallGuard.check` decorator, as well as automatically deriving and testing type hints at run-time with the `TypeClinic` utility.





// Provide an outline that lists the topics and activities you will use to guide the presentation. Please estimate what portion of your presentation youâ€™ll devote to each major topic. We just want to see where the focus will be.


-- Introduction (5 min)

Type Hints
    Benefits: maintainability and verifiability
    Generic containers and nested data structures
    Typing DataFrames in Pandas
    Typing DataFrames with full generic specification

The Problem of Typing DataFrames
    A nested data structure
    Variable numbers of columns and columnar types
    Complex hierarchical indices

-- `TypeVarTuple` in Action (10 min)

Introducing `TypeVarTuple`
    Variadic generics
    Class specification and mixture with `TypeVar`
    The expressive opportunities of star-unpacking tuples
    Using `typing-extensions` and `Unpack` for backwards compatibility

Using `TypeVarTuple` for defining a generic `Frame` in StaticFrame
    Defining a generic `Index`
    Defining a generic `Frame` with `TypeVar`s for index and columns
    Using `TypeVarTuple` for columnar types
    The number of columns can define the type

Is Shape a Type?
    NumPy's generic `ndarray` permits specifying shape and type
    As DataFrames have columnar types, typing columns is the priority
    Length is a more often a run-time concern for DataFrames

Using `TypeVarTuple` for defining hierarchical indices
    Hierarchical indices can be thought of as an `Index` per depth level
    Using `TypeVarTuple` for variable depths


-- Applications of Fully-Typed DataFrames (10 min)

Using Pyright and Mypy for static analysis
    Pyright offers full support
    Mypy (as of 7.1) support is in development

Using StaticFrame's `CallGuard.check` for run-time validation
    Type-hints can lie
    `CallGuard.check`: a decorator for run-time interface type validation
    Specialized to fullly validated nested containers
    Additional validators defined for usage in `Annotated` generics

Using StaticFrame's `TypeClinic` for type discovery and run-time type checking
    Given a complex DataFrame, determining the type-hint can be heard
    `TypeClinic` can derive type hints from in-memory objects
    `TypeClinic` can perform type-checks at run time

-- Conclusion (5 min)

An integrated, comprehensive type-hinting framework for DataFrames
    Generic `Index` and `IndexHierarchy`
    Generic `Series` and `Frame`
    Runtime interface validation
    Utilities for discovery and testing







`TypeVarTuple` thus permits defining explicit columnar types of fixed or variable size.

A DataFrame with no assumptions of index labels, column labels, or zero or more columnar types can be specified as `sf.Frame[Any, Any, *tuple[Any, ...]]`.